public function updateEmployeesLeaveGrade() {
   $r=request();

   $id=$r->employee;
   //update leave grade in employee table
   $employees=Employee::find($id);
   $employees->leave_grade=$r->leave_grade;
   $employees->save();

   //if employee was assigned with another leave grade before,
   //update the previous leave grade history "effective_until"
   if($r->originalLeaveGrade !== 'Unassigned') {
      $lastLeaveGradeHistories=DB::table('leave_grade_histories')
      ->where('employee','=',$id)
      ->whereNull('effective_until')
      ->get();

      foreach($lastLeaveGradeHistories as $lastLeaveGradeHistory) {
         $id=$lastLeaveGradeHistory->id;
         $lastLeaveGradeHistory=LeaveGradeHistory::find($id);
         $lastLeaveGradeHistory->effective_until=Carbon::now();
         $lastLeaveGradeHistory->save();
      }
   }

   //create a new leave grade history record
   $createLeaveGradeHistory=LeaveGradeHistory::create([
      'employee'=>$r->employee,
      'leave_grade'=>$r->leave_grade,
      'effective_from'=>Carbon::now(),
   ]);

   //if employee previous leave grade is unassigned,
   //create new employeeLeave record for each leave entitlement
   if($r->originalLeaveGrade == 'Unassigned') {
      $leaveEntitlements=DB::table('leave_entitlements')
      ->where('leave_entitlements.leaveGrade','=',$r->leave_grade)
      ->get();

      foreach ($leaveEntitlements as $leaveEntitlement) {
         $createEmployeeLeave=EmployeeLeave::create([
            'employee'=>$r->employee,
            'leave_type'=>$leaveEntitlement->leaveType,
            'total_days'=>$leaveEntitlement->num_of_days,
            'leaves_taken'=>0,
            'remaining_days'=>$leaveEntitlement->num_of_days,
            'year'=>Carbon::now()->format('Y'),
            'status'=>'Valid',
         ]);
      }
   } else {
      //if employee was assigned with another leave grade before,
      //needs to update the previous records,
      //and add new record if the leave type is not provided before

      $leaveGradeId=$r->leave_grade;

      //retrieve leave entitlement for the new leave grade
      $leaveEntitlements=DB::table('leave_entitlements')
      ->where('leave_entitlements.leaveGrade','=',$leaveGradeId)
      ->get();

      //retrieve employee's leave record for present year
      $employeeLeaves=DB::table('employee_leaves')
      ->where('employee','=',$r->employee)
      ->where('year','=',Carbon::now()->format('Y'))
      ->get();

      //set isMatched leave entitlement with employee's leave record to 0(false)
      $isMatched=0;

      //for each leave entitlement for the leave grade ...
      foreach($leaveEntitlements as $leaveEntitlement) {
         //set the value of $isMatched to 0(false) for every loop
         $isMatched=0;

         //find each leave entitlement with its id
         $leaveEntitlementId=$leaveEntitlement->id;
         $leaveEntitlement=LeaveEntitlement::find($leaveEntitlementId);

         //need to see if the leave entitlement for the leave grade
         //so we need to loop evert employeeLeave records
         foreach($employeeLeaves as $employeeLeave) {
            //find each employeeLeave record with its id
            $employeeLeaveId=$employeeLeave->id;
            $employeeLeave=EmployeeLeave::find($employeeLeaveId);

            //if the employeeLeave leave type matched with the leave entitlement leave type
            if($employeeLeave->leave_type == $leaveEntitlement->leaveType) {
               //set isMatched to 1(true)
               $isMatched=1;

               //update the data of the employee leave
               $employeeLeave->total_days=$leaveEntitlement->num_of_days;
               $remaining_days=($leaveEntitlement->num_of_days)-($employeeLeave->leaves_taken);
               if($leaveEntitlement->num_of_days-$employeeLeave->leaves_taken <0) {
                  $remaining_days=0;
               }
               $employeeLeave->remaining_days=$remaining_days;
               $employeeLeave->status='Valid';
               $employeeLeave->save();
            }
         }

         //if match is not found after looping all employeeï¼Œ
         //we need to create a new employee leave record
         if($isMatched==0) {
            $createEmployeeLeave=EmployeeLeave::create([
               'employee'=>$r->employee,
               'leave_type'=>$leaveEntitlement->leaveType,
               'total_days'=>$leaveEntitlement->num_of_days,
               'leaves_taken'=>0,
               'remaining_days'=>$leaveEntitlement->num_of_days,
               'year'=>Carbon::now()->format('Y'),
               'status'=>'Valid',
            ]);
         }
      }

      foreach($employeeLeaves as $employeeLeave) {
         //set isMatched leave entitlement with employee's leave record to 0(false)
         $isMatched=0;

         //find each employeeLeave record with its id
         $employeeLeaveId=$employeeLeave->id;
         $employeeLeave=EmployeeLeave::find($employeeLeaveId);

         foreach($leaveEntitlements as $leaveEntitlement) {
            //find each leave entitlement with its id
            $leaveEntitlementId=$leaveEntitlement->id;
            $leaveEntitlement=LeaveEntitlement::find($leaveEntitlementId);

            if($employeeLeave->leave_type == $leaveEntitlement->leaveType) {
               $isMatched=1;
            }
         }

         if($isMatched==0) {
            //because it loops for every employee leave record,
            //if the employee leave record does not match with any leave entitlement,
            //it means the leave type is not included in the new leave grade,
            //so it needs to be set to invalid
            $employeeLeave->status='Invalid';
            $employeeLeave->save();
         }
      }
   }
   Session::flash('success',"Leave grade assigned successfully!");
   return redirect()->route('allEmployeesLeaveGrade');
}
